name: Code Quality

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  linting-and-formatting:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install pipenv
      run: |
        python -m pip install --upgrade pip
        pip install pipenv
    
    - name: Install backend dependencies
      working-directory: ./backend
      run: |
        pipenv install --dev
    
    - name: Check code formatting with Black
      working-directory: ./backend
      run: |
        pipenv run black --check --diff .
      continue-on-error: true
    
    - name: Check import sorting with isort
      working-directory: ./backend
      run: |
        pipenv run isort --check-only --diff .
      continue-on-error: true
    
    - name: Run flake8 linting
      working-directory: ./backend
      run: |
        pipenv run flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        pipenv run flake8 . --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics
      continue-on-error: true

  frontend-linting:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Install frontend dependencies
      working-directory: ./frontend
      run: npm ci
    
    - name: Run ESLint
      working-directory: ./frontend
      run: npm run lint
      continue-on-error: true
    
    - name: Check TypeScript compilation
      working-directory: ./frontend
      run: npx tsc --noEmit
      continue-on-error: true

  test-quality:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_PASSWORD: testpassword
          POSTGRES_USER: testuser
          POSTGRES_DB: testdb
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install pipenv
      run: |
        python -m pip install --upgrade pip
        pip install pipenv
    
    - name: Install backend dependencies
      working-directory: ./backend
      run: |
        pipenv install --dev
    
    - name: Create test environment file
      working-directory: ./backend
      run: |
        cat > .env << EOF
        ENVIRONMENT=test
        DEBUG=true
        APP_NAME="AI Document Processor Test"
        APP_VERSION="1.0.0"
        DATABASE_URL=postgresql://testuser:testpassword@localhost:5432/testdb
        ANTHROPIC_API_KEY=test_key_not_used
        MAX_FILE_SIZE=10485760
        ALLOWED_FILE_TYPES=application/pdf,text/plain
        UPLOAD_FOLDER=uploads
        CORS_ORIGINS=http://localhost:3000,http://127.0.0.1:3000
        SECRET_KEY=test_secret_key_for_ci
        EOF
    
    - name: Run tests with coverage
      working-directory: ./backend
      run: |
        pipenv run pytest -m "not slow" --cov=app --cov-report=xml --cov-report=term-missing
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./backend/coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  dependency-check:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install pipenv
      run: |
        python -m pip install --upgrade pip
        pip install pipenv
    
    - name: Check for dependency vulnerabilities
      working-directory: ./backend
      run: |
        pipenv check
      continue-on-error: true
    
    - name: Check for outdated dependencies
      working-directory: ./backend
      run: |
        pipenv update --outdated
      continue-on-error: true