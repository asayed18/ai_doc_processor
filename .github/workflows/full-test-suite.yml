name: Full Test Suite

on:
  # Run weekly on Sunday at 2 AM UTC
  schedule:
    - cron: '0 2 * * 0'
  
  # Allow manual triggering
  workflow_dispatch:
    inputs:
      run_slow_tests:
        description: 'Include slow tests'
        required: false
        default: true
        type: boolean

jobs:
  comprehensive-tests:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_PASSWORD: testpassword
          POSTGRES_USER: testuser
          POSTGRES_DB: testdb
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install pipenv
      run: |
        python -m pip install --upgrade pip
        pip install pipenv
    
    - name: Install backend dependencies
      working-directory: ./backend
      run: |
        pipenv install --dev
    
    - name: Create test environment file
      working-directory: ./backend
      run: |
        cat > .env << EOF
        # Test Environment Configuration
        ENVIRONMENT=test
        DEBUG=true
        APP_NAME="AI Document Processor Test"
        APP_VERSION="1.0.0"
        
        # Test Database
        DATABASE_URL=postgresql://testuser:testpassword@localhost:5432/testdb
        
        # Anthropic API (not used in tests due to mocking)
        ANTHROPIC_API_KEY=test_key_not_used
        
        # File Upload Settings
        MAX_FILE_SIZE=10485760
        ALLOWED_FILE_TYPES=application/pdf,text/plain
        UPLOAD_FOLDER=uploads
        
        # CORS Settings
        CORS_ORIGINS=http://localhost:3000,http://127.0.0.1:3000
        
        # Security
        SECRET_KEY=test_secret_key_for_ci
        EOF
    
    - name: Run database migrations
      working-directory: ./backend
      run: |
        pipenv run alembic upgrade head || echo "No migrations to run"
    
    - name: Run all tests (excluding slow tests)
      working-directory: ./backend
      run: |
        pipenv run pytest -m "not slow" --tb=short -v --cov=app --cov-report=xml --cov-report=html
    
    - name: Run slow tests
      if: github.event.inputs.run_slow_tests == 'true' || github.event_name == 'schedule'
      working-directory: ./backend
      run: |
        pipenv run pytest -m "slow" --tb=short -v
    
    - name: Generate test report
      working-directory: ./backend
      run: |
        pipenv run pytest --tb=no --quiet --disable-warnings | tee test_summary.txt
        echo "## Test Results" >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY
        cat test_summary.txt >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY
    
    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./backend/coverage.xml
        flags: backend
        name: backend-coverage
    
    - name: Archive test results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: test-results
        path: |
          backend/htmlcov/
          backend/coverage.xml
          backend/test_summary.txt

  performance-tests:
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || github.event.inputs.run_slow_tests == 'true'
    
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_PASSWORD: testpassword
          POSTGRES_USER: testuser
          POSTGRES_DB: testdb
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install pipenv
      run: |
        python -m pip install --upgrade pip
        pip install pipenv
    
    - name: Install backend dependencies
      working-directory: ./backend
      run: |
        pipenv install --dev
    
    - name: Create test environment file
      working-directory: ./backend
      run: |
        cat > .env << EOF
        ENVIRONMENT=test
        DEBUG=true
        APP_NAME="AI Document Processor Test"
        APP_VERSION="1.0.0"
        DATABASE_URL=postgresql://testuser:testpassword@localhost:5432/testdb
        ANTHROPIC_API_KEY=test_key_not_used
        MAX_FILE_SIZE=10485760
        ALLOWED_FILE_TYPES=application/pdf,text/plain
        UPLOAD_FOLDER=uploads
        CORS_ORIGINS=http://localhost:3000,http://127.0.0.1:3000
        SECRET_KEY=test_secret_key_for_ci
        EOF
    
    - name: Run performance tests
      working-directory: ./backend
      run: |
        pipenv run pytest tests/test_file_upload.py::TestFileUploadPerformance -v
        pipenv run pytest tests/test_chat.py::TestChatPerformance -v