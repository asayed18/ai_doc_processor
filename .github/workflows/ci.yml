name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  backend-tests:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_PASSWORD: testpassword
          POSTGRES_USER: testuser
          POSTGRES_DB: testdb
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install pipenv
      run: |
        python -m pip install --upgrade pip
        pip install pipenv
    
    - name: Cache pipenv dependencies
      uses: actions/cache@v3
      with:
        path: ~/.local/share/virtualenvs
        key: ${{ runner.os }}-pipenv-${{ hashFiles('**/Pipfile.lock') }}
        restore-keys: |
          ${{ runner.os }}-pipenv-
    
    - name: Install backend dependencies
      working-directory: ./backend
      run: |
        pipenv install --dev
    
    - name: Create test environment file
      working-directory: ./backend
      run: |
        cat > .env << EOF
        # Test Environment Configuration
        ENVIRONMENT=test
        DEBUG=true
        APP_NAME="AI Document Processor Test"
        APP_VERSION="1.0.0"
        
        # Test Database
        DATABASE_URL=postgresql://testuser:testpassword@localhost:5432/testdb
        
        # Anthropic API (not used in tests due to mocking)
        ANTHROPIC_API_KEY=test_key_not_used
        
        # File Upload Settings
        MAX_FILE_SIZE=10485760
        ALLOWED_FILE_TYPES=application/pdf,text/plain
        UPLOAD_FOLDER=uploads
        
        # CORS Settings
        CORS_ORIGINS=http://localhost:3000,http://127.0.0.1:3000
        
        # Security
        SECRET_KEY=test_secret_key_for_ci
        EOF
    
    - name: Run database migrations
      working-directory: ./backend
      run: |
        pipenv run alembic upgrade head || echo "No migrations to run"
    
    - name: Run backend tests
      working-directory: ./backend
      run: |
        pipenv run pytest -m "not slow" --tb=short -v
    
    - name: Run integration tests specifically
      working-directory: ./backend
      run: |
        pipenv run pytest tests/test_integration.py -v
    
    - name: Run mock service verification
      working-directory: ./backend
      run: |
        pipenv run pytest tests/test_debug.py -v

  frontend-tests:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Install frontend dependencies
      working-directory: ./frontend
      run: npm ci
    
    - name: Build frontend
      working-directory: ./frontend
      run: npm run build
    
    - name: Run frontend linting
      working-directory: ./frontend
      run: npm run lint || echo "Linting step completed"

  code-quality:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install pipenv
      run: |
        python -m pip install --upgrade pip
        pip install pipenv
    
    - name: Install backend dependencies
      working-directory: ./backend
      run: |
        pipenv install --dev
    
    - name: Run code formatting check
      working-directory: ./backend
      run: |
        pipenv run black --check . || echo "Code formatting check completed"
    
    - name: Run import sorting check
      working-directory: ./backend
      run: |
        pipenv run isort --check-only . || echo "Import sorting check completed"

  security-scan:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
        exit-code: '0'  # Don't fail the build on vulnerabilities
    
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'